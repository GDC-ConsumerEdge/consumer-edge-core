
### ACM
- name: "Enable ACM API in GCP"
  command:
    cmd: gcloud beta container hub config-management enable
  run_once: true # only needs to run once
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  tags:
  - abm-software
  - enable-acm

### Operator

# Download operator
- name: "Download ACM Operator"
  command:
    cmd: "gsutil cp gs://config-management-release/released/{{ acm_version }}/config-management-operator.yaml {{ acm_config_files }}/config-management-operator.yaml"
    creates: "{{ acm_config_files }}/config-management-operator.yaml"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - abm-software

# Check for ACM Operator
- name: "Test for config-management operator presence"
  include_tasks: kubectl-presence.yml
  vars:
    name: "config-management"
    type: "configmanagements.configmanagement.gke.io"
    namespace: ""
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_acm_operator"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - acm-operator

- name: "Install ACM Operator" # Wait for ConfigManagement & RootSync CRDs
  shell: |
      kubectl apply -f {{ acm_config_files }}/config-management-operator.yaml
      sleep 10s
      kubectl wait --for=condition=established --timeout=600s crd configmanagements.configmanagement.gke.io
      exit $?
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_acm_operator == false)
  retries: 5
  delay: 10
  register: result
  until: result.rc == 0
  tags:
  - acm-operator

### Create ConfigSync configuration objects
- name: Copy config management configuration
  template:
    src: config-management.yaml.j2
    dest: "{{ acm_config_files }}/config-management-configuration.yaml"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-config-management

- name: "Test for config-management"
  include_tasks: kubectl-presence.yml
  vars:
    name: "config-management"
    type: "configmanagements.configmanagement.gke.io"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_config_management"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-config-management

- name: "Create Config Management Configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/config-management-configuration.yaml
    sleep 10s # just enough for the API to pick up the changes, then wait can take over
    kubectl wait --for=condition=established --timeout=600s crd rootsyncs.configsync.gke.io
    exit $?
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_config_management == false)
  retries: 5
  delay: 10
  register: cmc_result
  until: cmc_result.rc == 0
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - acm-config-management

#### Root Repo Configuration

# NOTE: If the git-creds secret already exists, no action is taken. There is NO effort to determine what type of secret so switching between types requires removal of the `git-creds` secret within the cluster
- name: "Test for existing git-creds secret"
  include_tasks: kubectl-presence.yml
  vars:
    name: "{{ root_repository_git_secret_name }}"
    type: "secrets"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_secret"
  tags:
  - acm-root-repo

- name: "Create dependencies for RootRepo (if not exists) [Token Method]"
  import_tasks: "config-root-repo-token.yaml"
  when:
  - (root_repository_git_auth_type == "token")
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  - (has_root_repo_secret is defined)
  - (has_root_repo_secret == false)
  tags:
  - acm-root-repo
  - acm-root-repo-token-method

- name: "Create dependencies for RootRepo (if not exists) [SSH Method]"
  import_tasks: "config-root-repo-ssh.yaml"
  when:
  - (root_repository_git_auth_type == "ssh")
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  - (has_root_repo_secret is defined)
  - (has_root_repo_secret == false)
  tags:
  - acm-root-repo
  - acm-root-repo-ssh-method

- name: "Create dependencies for RootRepo (if not exists) [GCP GSA Method]"
  import_tasks: "config-root-repo-gcp-gsa.yaml"
  when:
  - (root_repository_git_auth_type == "gcpserviceaccount")
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - acm-root-repo
  - acm-root-repo-gcp-gsa-method

- name: Copy RootRepo Sync Config File
  template:
    src: root-sync.yaml.j2
    dest: "{{ acm_config_files }}/root-sync.yaml"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo
  - generate-root-sync

- name: "Test for Root Repo installed"
  include_tasks: kubectl-presence.yml
  vars:
    name: "root-sync"
    type: "RootSync"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_installed"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo

- name: "Apply Root Repo configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/root-sync.yaml
    sleep 10s # just enough for the API to pick up the changes, then wait can take over
    kubectl wait --for=condition=established --timeout=600s crd rootsyncs.configsync.gke.io
    exit $?
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_root_repo_installed == false)
  tags:
  - acm-root-repo

- name: "Wait for RootReconciler deployment to be ready"
  command:
    cmd: kubectl wait --for=condition=available --timeout=600s deployment.apps/root-reconciler -n config-management-system
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  retries: 5
  delay: 10
  register: root_recon_result
  until: root_recon_result.rc == 0
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_root_repo_installed == false)
  tags:
  - acm-root-repo

- name: "Wait on ExternalSecrets to be deployed coming from RootRepo"
  command:
    cmd: kubectl wait --for=condition=available --timeout=600s deployment.apps/external-secrets -n external-secrets
  retries: 10
  delay: 10
  register: external_secret_deployment
  until: external_secret_deployment.rc == 0
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo
  - external-secret-install
