#
# Install ACM
#

- name: Fail if local SCM_TOKEN_USER ENV is not defined
  assert:
    that:
      - scm_token_user != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_USER' needs to be defined for the target Google Project ID"
  tags:
  - verify

- name: Fail if local SCM_TOKEN_TOKEN ENV is not defined
  assert:
    that:
      - scm_token_token != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_TOKEN' needs to be defined for the target Google Project ID"
  tags:
  - verify

- name: Remove taint from master node
  command:
    cmd: kubectl taint nodes {{ cluster_name }} node-role.kubernetes.io/master:NoSchedule-
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - abm-software
  - abm-config
  - onetime

- name: Folder for ACM configurations
  file:
    path: '{{ acm_config_files }}'
    state: directory
    mode: '0755'
  tags:
  - abm-software
  - abm-config

- name: "Enable ACM"
  command:
    cmd: gcloud alpha container hub config-management enable
  run_once: true # only needs to run once
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
  tags:
  - abm-software
  - enable-acm

########## Start installing software
- name: "Download ACM Operator"
  command:
    cmd: "gsutil cp gs://config-management-release/released/{{ acm_version }}/config-management-operator.yaml {{ acm_config_files }}/config-management-operator.yaml"
    creates: "{{ acm_config_files }}/config-management-operator.yaml"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
  tags:
  - abm-software

### Operator
# Check for ACM Operator
- name: "Test for config-management operator presence"
  include: kubectl-presence.yml
  vars:
    name: "crds"
    type: "configmanagements.configmanagement.gke.io"
    namespace: ""
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_acm_operator"
  tags:
  - acm-operator

- name: "Install ACM Operator"
  shell: |
      kubectl apply -f {{ acm_config_files }}/config-management-operator.yaml
      kubectl wait --for=condition=established --timeout=120s crd configmanagements.configmanagement.gke.io # Wait for ConfigManagement & RootSync CRDs
      exit $?
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when: has_acm_operator == false
  tags:
  - acm-operator

### Create ConfigSync configuration objects
- name: Copy config management configuration
  template:
    src: config-management.yaml.j2
    dest: "{{ acm_config_files }}/config-management-configuration.yaml"
  tags:
  - acm-config-management

- name: "Test for config-management"
  include: kubectl-presence.yml
  vars:
    name: "config-management"
    type: "configmanagements.configmanagement.gke.io"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_config_management"
  tags:
  - acm-config-management

- name: "Create Config Management Configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/config-management-configuration.yaml
    sleep 5s
    kubectl wait --for=condition=established --timeout=120s crd rootsyncs.configsync.gke.io
    exit $?
  when:
    - has_config_management == false
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - acm-config-management

#### Root Repo Configuration

- name: Copy config management configuration
  template:
    src: root-sync.yaml.j2
    dest: "{{ acm_config_files }}/root-sync.yaml"
  tags:
  - acm-root-repo

- name: "Test for Root Repo secret"
  include: kubectl-presence.yml
  vars:
    name: "{{ root_repository_git_secret_name }}"
    type: "secrets"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_secret"
  tags:
  - acm-root-repo

- name: "Create secret token for Root Repo"
  command:
    cmd: "kubectl create secret generic {{ root_repository_git_secret_name }} --namespace='config-management-system' --from-literal='username={{ scm_token_user }}' --from-literal='token={{ scm_token_token }}'"
  when: has_root_repo_secret == false
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - acm-root-repo

- name: "Test for Root Repo installed"
  include: kubectl-presence.yml
  vars:
    name: "root-sync"
    type: "RootSync"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_installed"
  tags:
  - acm-root-repo

- name: "Apply Root Repo configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/root-sync.yaml
    sleep 5s
    kubectl wait --for=condition=established --timeout=120s crd rootsyncs.configsync.gke.io
    exit $?
  # when: has_root_repo_installed == false
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - acm-root-repo
