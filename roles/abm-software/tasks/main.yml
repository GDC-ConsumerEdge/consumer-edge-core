#
# Install ACM
#

- name: Fail if local SCM_TOKEN_USER ENV is not defined
  assert:
    that:
      - scm_token_user != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_USER' needs to be defined for the target Google Project ID"
  tags:
  - verify

- name: Fail if local SCM_TOKEN_TOKEN ENV is not defined
  assert:
    that:
      - scm_token_token != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_TOKEN' needs to be defined for the target Google Project ID"
  tags:
  - verify

- name: Folder for ACM configurations
  file:
    path: '{{ acm_config_files }}'
    state: directory
    mode: '0755'
  tags:
  - abm-software
  - abm-config

- name: "Enable ACM"
  command:
    cmd: gcloud alpha container hub config-management enable
  run_once: true # only needs to run once
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
  tags:
  - abm-software
  - enable-acm

### TODO: Add a check and fact for ACM operator

- name: "Install ACM Operator"
  shell: |
      # Install ACM (Config Management base operator)
      gsutil cp gs://config-management-release/released/{{ acm_version }}/config-management-operator.yaml {{ acm_config_files }}/config-management-operator.yaml

      kubectl apply -f {{ acm_config_files }}/config-management-operator.yaml
      # Wait for ConfigManagement & RootSync CRDs
      kubectl wait --for=condition=established --timeout=60s crd configmanagements.configmanagement.gke.io

      exit $?
  args:
    executable: /bin/bash
    creates: "{{ acm_config_files }}/config-management-operator.yaml"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - abm-software
  - abm-kubectl

### Create ConfigSync configuration objects
- name: "Create secret token for Root Repo"
  shell: |
    EXISTS=$(kubectl describe ns config-management-system > /dev/null 2>&1 )
    if [[ $? -gt 0 ]]; then
      # create
      kubectl create ns config-management-system
    fi
    EXISTS=$(kubectl get secret git-creds -n config-management-system > /dev/null 2>&1 )
    if [[ $? -gt 0 ]]; then
      kubectl create secret generic git-creds \
        --namespace="config-management-system" \
        --from-literal=username={{ scm_token_user }} \
        --from-literal=token={{ scm_token_token }}
    fi
  args:
    executable: /bin/bash
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - abm-software
  - abm-kubectl

- name: Config management configuration
  template:
    src: config-management.yaml.j2
    dest: "{{ acm_config_files }}/config-management-configuration.yaml"
  tags:
  - abm-software
  - abm-kubectl

- name: "Create secret token for Root Repo"
  shell: |
    EXISTS=$(kubectl get configmanagement config-management -n config-management-system > /dev/null 2>&1 )
    if [[ $? -gt 0 ]]; then
      # create
      kubectl apply -f "{{ acm_config_files }}/config-management-configuration.yaml"
    fi
  args:
    executable: /bin/bash
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
    GOOGLE_APPLICATION_CREDENTIALS: "/var/keys/gsa-key.json"
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - abm-software
  - abm-kubectl


# kubectl get -n config-management-system deployment/root-reconciler
# kubectl wait --for=condition=established --timeout=120s crd rootsyncs.configsync.gke.io