- name: Post-Install--Fail if number of available hosts != in-play count
  fail:
    msg: "Failure caused by expected {{ ansible_play_hosts_all|length }} hosts but have {{ ansible_play_hosts|length }}. Check failures above to see what issue happened."
  when: (ansible_play_hosts_all|length) != (ansible_play_hosts|length)
  tags:
  - verify

#
# Install ACM
#
- name: Fail if local SCM_TOKEN_USER ENV is not defined
  assert:
    that:
      - scm_token_user != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_USER' needs to be defined for the target Google Project ID"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - verify

- name: Fail if local SCM_TOKEN_TOKEN ENV is not defined
  assert:
    that:
      - scm_token_token != ""
    fail_msg: "The local environment variable 'SCM_TOKEN_TOKEN' needs to be defined for the target Google Project ID"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - verify

- name: Remove taint from master node
  command:
    cmd: kubectl taint nodes {{ cluster_name }} node-role.kubernetes.io/master:NoSchedule-
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  ignore_errors: yes
  tags:
  - abm-software
  - abm-config

- name: Folder for ACM configurations
  file:
    path: '{{ acm_config_files }}'
    state: directory
    mode: '0755'
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - abm-software
  - abm-config

### Add External Secrets

- name: Create folder for External Secrets files
  file:
    path: '{{ external_secrets_files }}'
    state: directory
    mode: '0755'
  tags:
  - external-secrets-operator
  - external-secrets-copy

# Copy over the external secrets operator and CRD to all inventory
- name: Copy External Secrets Operator and CRD files
  copy:
    src: "{{ item }}"
    dest: "{{ external_secrets_files }}"
    mode: '0444' # read/write/execute owner, everyone else read/execute
  with_fileglob: "external-secrets-c*.yaml"
  tags:
  - external-secrets-operator
  - external-secrets-copy

- name: "Install External Secrets Operator (b/185519826)"
  shell: |
      kubectl apply -f {{ external_secrets_files }}/external-secrets-crd.yaml
      # Allow for the API to register the API
      sleep 5s
      kubectl wait --for=condition=established --timeout=600s crd externalsecrets.kubernetes-client.io
      exit $?
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  retries: 3
  register: result
  until: result.rc == 0
  tags:
  - external-secrets-operator
  - external-secrets-apply

 ###  Setup & install Longhorn if settings
- name: Setup Longhorn
  include: csi-longhorn.yaml
  vars:
    kubeconfig: "{{ kubeconfig_shared_location }}"
  when: storage_provider == "longhorn"
  tags:
  - longhorn
  - storage-setup

### ACM
- name: "Enable ACM API in GCP"
  command:
    cmd: gcloud alpha container hub config-management enable
  run_once: true # only needs to run once
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  tags:
  - abm-software
  - enable-acm

########## Start installing software
- name: "Download ACM Operator"
  command:
    cmd: "gsutil cp gs://config-management-release/released/{{ acm_version }}/config-management-operator.yaml {{ acm_config_files }}/config-management-operator.yaml"
    creates: "{{ acm_config_files }}/config-management-operator.yaml"
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - abm-software

### Operator
# Check for ACM Operator
- name: "Test for config-management operator presence"
  include: kubectl-presence.yml
  vars:
    name: "config-management"
    type: "configmanagements.configmanagement.gke.io"
    namespace: ""
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_acm_operator"
  when: "(primary_cluster_machine is defined) and (primary_cluster_machine == true)"
  tags:
  - acm-operator

- name: "Install ACM Operator"
  shell: |
      kubectl apply -f {{ acm_config_files }}/config-management-operator.yaml
      sleep 10s
      kubectl wait --for=condition=established --timeout=600s crd configmanagements.configmanagement.gke.io # Wait for ConfigManagement & RootSync CRDs
      exit $?
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_acm_operator == false)
  retries: 3
  register: result
  until: result.rc == 0
  tags:
  - acm-operator

### Create ConfigSync configuration objects
- name: Copy config management configuration
  template:
    src: config-management.yaml.j2
    dest: "{{ acm_config_files }}/config-management-configuration.yaml"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-config-management

- name: "Test for config-management"
  include: kubectl-presence.yml
  vars:
    name: "config-management"
    type: "configmanagements.configmanagement.gke.io"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_config_management"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-config-management

- name: "Create Config Management Configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/config-management-configuration.yaml
    sleep 10s # just enough for the API to pick up the changes, then wait can take over
    kubectl wait --for=condition=established --timeout=600s crd rootsyncs.configsync.gke.io
    exit $?
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_config_management == false)
  retries: 3
  register: cmc_result
  until: cmc_result.rc == 0
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - acm-config-management

#### Root Repo Configuration

- name: Copy config management configuration
  template:
    src: root-sync.yaml.j2
    dest: "{{ acm_config_files }}/root-sync.yaml"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo

- name: "Test for Root Repo secret"
  include: kubectl-presence.yml
  vars:
    name: "{{ root_repository_git_secret_name }}"
    type: "secrets"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_secret"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo

- name: "Create secret token for Root Repo"
  command:
    cmd: "kubectl create secret generic {{ root_repository_git_secret_name }} --namespace='config-management-system' --from-literal='username={{ scm_token_user }}' --from-literal='token={{ scm_token_token }}'"
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_root_repo_secret == false)
  tags:
  - acm-root-repo

- name: "Test for Root Repo installed"
  include: kubectl-presence.yml
  vars:
    name: "root-sync"
    type: "RootSync"
    namespace: "config-management-system"
    kubeconfig: "{{ kubeconfig_shared_location }}"
    fact_name: "has_root_repo_installed"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - acm-root-repo

- name: "Apply Root Repo configuration"
  shell: |
    kubectl apply -f {{ acm_config_files }}/root-sync.yaml
    sleep 10s # just enough for the API to pick up the changes, then wait can take over
    kubectl wait --for=condition=established --timeout=600s crd rootsyncs.configsync.gke.io
    exit $?
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (has_root_repo_installed == false)
  tags:
  - acm-root-repo

- name: "Create secret for External Secrets"
  shell: |
    kubectl create ns external-secrets || true
    kubectl create secret generic gcp-creds --from-file=/var/keys/external-secrets-k8s-creds.json -n external-secrets || true
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - abm-software
  - external-secrets

- name: "Add CPU Monitor KubeVirt service files"
  include: cpumonitor-service.yaml
  tags:
  - cpu-monitor
  - cdi

################# Setup secrets for git-creds and namespace repos per each franchise

- name: "Create git-cred secrets in GCP Secret Manager"
  run_once: true # only need to run on one machine, create all of the secets
  shell: |
    EXISTS=$(gcloud secrets list --filter="{{ item.git_creds_gcp_secret_name }}" --format="value(name)" --project="{{ google_project_id }}")
    if [ -z "${EXISTS}" ]]; then
      gcloud secrets create {{ item.git_creds_gcp_secret_name }} --replication-policy="automatic" --project="{{ google_project_id }}"
      echo "ADDED"
    fi
  register: out
  changed_when: '"ADDED" in out.stdout_lines'
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  loop: "{{ franchises }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  tags:
  - abm-software
  - enable-acm
  - post-acm

- name: "Add new version to git-cred franchise secret in GCP Secret Manager IF no current or active versions exists"
  run_once: true # only need to run on one machine, create all of the secets
  shell: |
    EXISTS=$(gcloud secrets versions list {{ item.git_creds_gcp_secret_name }} --filter="state=enabled" --format="value(name)"  --project="{{ google_project_id }}")
    if [ -z "${EXISTS}" ]; then
      echo -n "{\"token\"{{':'}} \"{{ scm_token_token }}\", \"username\"{{':'}} \"{{ scm_token_user }}\"}" | gcloud secrets versions add {{ item.git_creds_gcp_secret_name }} --project="{{ google_project_id }}" --data-file=-
      echo "ADDED"
    fi
  register: out
  changed_when: '"ADDED" in out.stdout_lines'
  loop: "{{ franchises }}"
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
  environment:
    PATH: "{{ tools_base_path }}/google-cloud-sdk/bin:{{ ansible_env.PATH }}"
  tags:
  - abm-software
  - enable-acm
  - post-acm

- name: "Hydrate and copy templates for OIDC"
  template:
    src: "{{ item.template }}"
    dest: "{{ acm_config_files }}/{{ item.final_name }}"
  loop:
  - {"template": "oidc-setup.yaml.j2", "final_name": "oidc-setup.yaml"}
  - {"template": "oidc-rolebindings.yaml.j2", "final_name": "oidc-rolebindings.yaml"}
  when:
  - primary_cluster_machine is defined
  - primary_cluster_machine == true
  - enable_oidc == true
  tags:
  - oidc
  - post-acm

- name: "Configure OIDC with Google Cloud Identity"
  shell: |
    kubectl -n kube-public patch clientconfig default --type merge --patch "$(cat {{ acm_config_files }}/oidc-setup.yaml)"
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
  - primary_cluster_machine is defined
  - primary_cluster_machine == true
  - enable_oidc == true
  tags:
  - oidc
  - post-acm

- name: "Configure role binding for OIDC"
  shell: |
    kubectl apply -f {{ acm_config_files }}/oidc-rolebindings.yaml
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
  - primary_cluster_machine is defined
  - primary_cluster_machine == true
  - enable_oidc == true
  tags:
  - oidc
  - post-acm


