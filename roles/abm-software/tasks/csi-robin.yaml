# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
### Configuration, proceedures and tasks associated with setting up Robin.io storage
###

- name: "Copy Robin Client script for this cluster"
  copy:
    src: robin-get-client.sh
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "755"
  tags:
  - robin-install
  - robin-client

- name: "Copy Robin Login Client script for this cluster"
  copy:
    src: robin-login-client.sh
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
  tags:
  - robin-install
  - robin-client

# Runs the above script on a regular basis to get a fresh robin-cli
- name: Create cron-job to run Robin Client
  template:
    src: robin-get-client-cron.j2
    dest: /etc/cron.d/robin-get-client-cron
    owner: root
    group: root
    mode: "0744"
  tags:
  - robin-install
  - robin-client
  - robin-cron

# Create License Secret for Robin
- name: "Create Robin GCP Secret (robin-sds-license)"
  run_once: true
  shell: |
    EXISTS=$(gcloud secrets list --filter="{{ robin_gcp_secret_name }}" --format="value(name)" --project="{{ google_secret_project_id }}")
    if [ -z "${EXISTS}" ]]; then
      gcloud secrets create {{ robin_gcp_secret_name }} --replication-policy="automatic" --project="{{ google_secret_project_id }}"
      echo "ADDED"
    fi
  register: sds_license_creds
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-license
  - gcloud-mutate

# Copy license file over to machine

# Create a new secret version if none are active or exist
- name: "Add new version of Robin License if none exist"
  run_once: true
  shell: |
    EXISTS=$(gcloud secrets versions list {{ storage_provider_auth_secret }} --filter="state=enabled" --format="value(name)"  --project="{{ google_secret_project_id }}")
    if [ -z "${EXISTS}" ]; then
      cat "{{ robin_license_file_location }}" | gcloud secrets versions add {{ storage_provider_auth_secret }} --project="{{ google_secret_project_id }}" --data-file=-
      echo "ADDED"
    fi
  register: sds_license_secret_version
  changed_when: '"ADDED" in sds_license_secret_version.stdout_lines'
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-license
  - gcloud-mutate

- name: "Copy Robin Storage Profile Block Type"
  template:
    src: robin-storage-profile.yaml.j2
    dest: "{{ sds_config_files }}/robin-storage-profile.yaml"
  tags:
  - robin-install
  - robin-storage-block

- name: "Apply Robin Storage Profile Block Type"
  ignore_errors: true
  command:
    cmd: "kubectl apply -f {{ sds_config_files }}/robin-storage-profile.yaml"
  register: apply_block_type
  changed_when:
  - apply_block_type is successful
  failed_when:
  - apply_block_type is failed
  - '"Error from server (AlreadyExists)" not in result.stdout'
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-storage-block