# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
### Configuration, proceedures and tasks associated with setting up Robin.io storage
###

- name: "Copy Robin Client script for this cluster"
  copy:
    src: robin-get-client.sh
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "755"
  tags:
  - robin-io
  - robin-install
  - robin-install-client

- name: "Copy Robin Login Client script for this cluster"
  copy:
    src: robin-login-client.sh
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
  tags:
  - robin-io
  - robin-install
  - robin-install-client

# Runs the above script on a regular basis to get a fresh robin-cli
- name: Create cron-job to run Robin Client
  template:
    src: robin-get-client-cron.j2
    dest: /etc/cron.d/robin-get-client-cron
    owner: root
    group: root
    mode: "0744"
  tags:
  - robin-io
  - robin-install
  - robin-install-client
  - robin-cron

# Create License Secret for Robin
- name: "Create Robin GCP Secret (robin-sds-license)"
  run_once: true
  shell: |
    EXISTS=$(gcloud secrets list --filter="{{ robin_gcp_secret_name }}" --format="value(name)" --project="{{ google_secret_project_id }}")
    if [ -z "${EXISTS}" ]]; then
      gcloud secrets create {{ robin_gcp_secret_name }} --replication-policy="automatic" --project="{{ google_secret_project_id }}"
      echo "ADDED"
    fi
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-io
  - robin-install
  - robin-license
  - gcloud-mutate

- name: Create robin install folder
  file:
    path: "{{ robin_install_folder }}"
    state: directory
    mode: "0755"
  tags:
  - robin-io
  - robin-install
  - robin-intall-setup

- name: Copy TAR over to the primary cluster
  copy:
    src: "{{ robin_install_bundle_file }}"
    dest: "{{ robin_install_folder }}/robin.tar"
    owner: root
    group: root
    mode: "0644"
  when:
  - (robin_install_bundle_file | length > 0)
  tags:
  - robin-io
  - robin-install
  - robin-intall-setup

- name: Extract Robin tar file
  unarchive:
    src: "{{ robin_install_folder }}/robin.tar"
    dest: "{{ robin_install_folder }}"
    remote_src: true
    creates: "{{ robin_install_folder }}/robin" # binary is inside the tar
  when:
  - (robin_install_bundle_file | length > 0)
  tags:
  - robin-io
  - robin-install
  - robin-intall-setup

- name: "Install Robin using Reporting Secret"
  ignore_errors: true
  shell: |
    {{ robin_install_folder }}/install-robin.sh --reporting-secret={{ robin_acm_secret_name }} --repo=gcr.io/robinio-public/robin-storage -y
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  args:
    chdir: "{{ robin_install_folder }}"
  register: robin_install_status
  when:
  - primary_cluster_machine is defined and primary_cluster_machine == true
  - robin-install-reporting-secret is defined and robin-install-reporting-secret == true
  tags:
  - robin-install
  - robin-install-commit
  - robin-install-actual

- name: "Install Robin using 90day Trial"
  ignore_errors: true
  shell: |
    {{ robin_install_folder }}/install-robin.sh --repo=gcr.io/robinio-public/robin-storage -y
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  args:
    chdir: "{{ robin_install_folder }}"
  register: robin_install_status
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  - robin-install-reporting-secret is not defined or robin-install-reporting-secret == false
  tags:
  - robin-install
  - robin-install-commit
  - robin-install-actual

- name: Robin install output
  debug:
    msg: "{{ robin_install_status }}"
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-io
  - robin-install
  - robin-install-commit
  - robin-install-actual

#####  Wait till basic robin operator & components installs

- name: Wait on Robin Basic install top complete
  shell:
    cmd: "kubectl wait --for=condition=ready pod -l robin.io/vnodetype=robin -n robinio"
  environment:
    KUBECONFIG: "{{ kubeconfig_shared_location }}"
  tags:
  - robin-io
  - robin-verify
  - robin-install
  - robin-install-actual

- name: Get Robin Client and can take 10 minutes
  command:
    cmd: /usr/local/bin/robin-get-client.sh
  args:
    creates: "/usr/local/bin/robin"
  until: robin_binary_status.rc == 0
  register: robin_binary_status
  retries: "{{ robin_client_retries }}"
  delay: "{{ robin_client_delay }}"
  tags:
  - robin-io
  - robin-install
  - robin-install-client
  - robin-install-actual

- name: Login the Robin Client
  command:
    cmd: /usr/local/bin/robin-login-client.sh
  until: robin_client_status.rc == 0
  register: robin_client_status
  retries: "{{ robin_client_retries }}"
  delay: "{{ robin_client_delay }}"
  tags:
  - robin-io
  - robin-install
  - robin-install-client
  - robin-install-actual

# Wait on Robin to have all services up
# TODO: This is NOT ready, this needs to loop till all services are up and none are critical
- name: Wait on robin to have all services up on all hosts
  shell:
    # NOTE -vqz for grep is to pass IF not found, do not pass if found (THIS CAN BE AN ISSUE IF OUTPUT CHANGES, SAY FROM critical TO error)
    # 'critical' is the current state of failing services for robin host
    cmd: "robin host list --services --json | jq -r '.items[].services' | grep -vqz critical"
  until: robin_host_status.rc == 0
  register: robin_host_status
  retries: "{{ robin_client_retries }}"
  delay: "{{ robin_client_delay }}"
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-install-commit
  - robin-install-post
  - robin-install-actual

# ansible-playbook all-install-abm-software.yml -i inventory --extra-vars="@build-artifacts/instance-run-vars.yaml" --skip-tags gcloud-mutate --limit patagonia* --tags always,robin-install-disk-ready

# - name: Verify all Robin Host has Storage
#   shell:
#     cmd: robin host list

### Manually add disks to robin by setting Role to Storage
- name: Copy Disk Setup script for Robin
  copy:
    src: robin-disk-storage-setup.sh
    dest: "{{ robin_install_folder }}"
    owner: root
    group: root
    mode: "0744"
  tags:
  - robin-install
  - robin-install-commit
  - robin-install-post
  - robin-install-disk-setup
  - robin-install-actual

- name: Run disk setup script
  command:
    cmd: "{{ robin_install_folder }}/robin-disk-storage-setup.sh"
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-install-commit
  - robin-install-post
  - robin-install-disk-setup
  - robin-install-actual

### Verify Disks have been convereted to ONLINE
- name: Copy Disk Verify Script for Robin
  copy:
    src: robin-disk-completed.sh
    dest: "{{ robin_install_folder }}"
    owner: root
    group: root
    mode: "0744"
  tags:
  - robin-install
  - robin-install-disk-ready
  - robin-install-post
  - robin-install-actual

- name: Verify we have host number of disks as Storage. Retry command until successful or timeout
  command:
    cmd: "{{ robin_install_folder }}/robin-disk-completed.sh {{ ansible_play_hosts_all | length }}"
  register: robin_storage_role_status
  until: robin_storage_role_status.rc == 0
  retries: "{{ robin_client_retries }}"
  delay: "{{ robin_client_delay }}"
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  tags:
  - robin-install
  - robin-install-disk-ready
  - robin-install-post
  - robin-install-actual

- name: Change ownership of robin install folder and all files under
  file:
    path: "{{ robin_install_folder }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  tags:
  - robin-io
  - robin-install
  - robin-intall-setup
