{#
  # Copyright 2023 Google LLC
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
#}
#!/bin/bash

# 1. grep 'client-certificate-data' /var/abm-install/kubeconfig/kubeconfig | awk '{print $2}' | base64 -d | openssl x509 -text | grep Validity -A2
# 2. sudo tar -zcvf /home/abm-admin/gdc-etc-kube.tar.gz /etc/kubernetes
# 3. sudo kubeadm certs renew all
# 4. sudo kubeadm certs check-expiration
# 5. Stop containers (or just reboot)

### Preconditions for script running
# Check if the script is run by root (UID 0)
if [[ "$UID" -eq 0 ]]; then
  >&2 echo "This script should not be run as root."
  exit 1  # Exit with a non-zero exit code indicating an error
fi

# Make sure sudo is possible
if ! sudo -v; then
  echo "User running this script cannot sudo. Please check your sudo configuration."
  exit 1 # Exit with an error code
fi

### Variables
TEMPD=$(mktemp -d -t "kube-backup-XXXXXX")
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")

### Script Start
# Check to see if certs are out-of-date
CERT_CONDITION=$(grep 'client-certificate-data' /var/abm-install/kubeconfig/kubeconfig | awk '{print $2}' | base64 -d | openssl x509 -text | grep Validity -A2)
if [[ $? > 0 ]]; then
    >&2 echo "Certificates are already out of date and cannot be automated for replacmenet"
    exit 1
fi

# Exit if the temp directory wasn't created successfully.
if [ ! -e "$TEMPD" ]; then
    >&2 echo "Failed to create temp directory"
    exit 1
fi

# Backup Kube folder
sudo tar -zcvf "/${TMPD}/gdc-etc-kube-${TIMESTAMP}.tar.gz" /etc/kubernetes

if [[ $? -gt 0 ]]; then
    >&2 echo "Error backing up Kubernetes folder, existing"
    exit 1
fi

sudo kubeadm certs renew all

if [[ $? -gt 0 ]]; then
    >&2 echo "Error generating new certs, existing"
    # TODO Un-tar the backup
    exit 1
fi

sudo kubeadm certs check-expiration

if [[ $? -gt 0 ]]; then
    >&2 echo "Unable to check expiration, existing"
    # TODO Un-tar the backup
    exit 1
fi

CERT_CONDITION_AFTER=$(grep 'client-certificate-data' /var/abm-install/kubeconfig/kubeconfig | awk '{print $2}' | base64 -d | openssl x509 -text | grep Validity -A2)
if [[ $? > 0 ]]; then
    >&2 echo "Certificates are already out of date and cannot be automated for replacmenet"
    exit 1
fi

# Copy over the new config with the new certs. For now, the kubeadmin is going to work.
cp /var/abm-install/kubeconfig/kubeconfig /var/abm-install/kubeconfig/kubeconfig.bak
cp /etc/kubernetes/admin.conf /var/abm-install/kubeconfig/kubeconfig
